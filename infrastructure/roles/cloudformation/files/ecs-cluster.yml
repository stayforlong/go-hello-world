Description: Stack for create ECS cluster, this template is based on AWS public template

AWSTemplateFormatVersion: 2010-09-09
Parameters:
  Env:
    Description: Environment
    Type: String
  MinSize:
    Type: Number
    Default: '3'
    Description: Minimum number of instances that can be launched in your ECS cluster.
  MaxSize:
    Type: Number
    Default: '10'
    Description: Maximum number of instances that can be launched in your ECS cluster.
  myIP:
    Description: IP for autorize 22 port on ECS instances
    Type: String
  InstanceTypes:
    Description: Comma-delimited list of three instance types
    Type: CommaDelimitedList
Mappings:
  AWSRegionToAMI:
    eu-west-1:
      AMIID: ami-0c9ef930279337028
    eu-central-1:
      AMIID: ami-065c1e34da68f2b02
Resources:
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Ref Env
  EcsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ECS Security Group
      VpcId: 
        Fn::ImportValue: !Sub '${Env}-VPC'
  EcsSecurityGroupSSHinbound:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref myIP
  ECSAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: 
        - Fn::ImportValue: !Sub '${Env}-PublicSubnet1'
        - Fn::ImportValue: !Sub '${Env}-PubliSubnet2'
        - Fn::ImportValue: !Sub '${Env}-PublicSubnet3'
      MixedInstancesPolicy:
        LaunchTemplate:
          LaunchTemplateSpecification: 
            LaunchTemplateId: !Ref ContainerInstances
            Version: !GetAtt ContainerInstances.LatestVersionNumber
          Overrides: 
            - InstanceType: !Select [ "0", !Ref InstanceTypes ]
            - InstanceType: !Select [ "1", !Ref InstanceTypes ]
            - InstanceType: !Select [ "2", !Ref InstanceTypes ]
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
  ContainerInstances:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Ref Env
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt
            - EC2InstanceProfile
            - Arn
        DisableApiTermination: true
        SecurityGroupIds:
          - !Ref EcsSecurityGroup
        ImageId: !FindInMap 
          - AWSRegionToAMI
          - !Ref 'AWS::Region'
          - AMIID
        InstanceType: !Select [ "0", !Ref InstanceTypes ]
        KeyName: !Ref Env
        UserData: !Base64 
          'Fn::Join':
            - ''
            - - |
                #!/bin/bash -xe
              - echo ECS_CLUSTER=
              - !Ref ECSCluster
              - |2
                >> /etc/ecs/ecs.config
              - |
                yum install -y aws-cfn-bootstrap
              - '/opt/aws/bin/cfn-signal -e $? '
              - '         --stack '
              - !Ref 'AWS::StackName'
              - '         --resource ECSAutoScalingGroup '
              - '         --region '
              - !Ref 'AWS::Region'
              - |+

  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecs:CreateCluster'
                  - 'ecs:DeregisterContainerInstance'
                  - 'ecs:DiscoverPollEndpoint'
                  - 'ecs:Poll'
                  - 'ecs:RegisterContainerInstance'
                  - 'ecs:StartTelemetrySession'
                  - 'ecs:Submit*'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role
  
  CloudwatchLogsGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join 
        - '-'
        - - !Sub ${Env}-ECSLogGroup
          - !Ref 'AWS::StackName'
      RetentionInDays: 14
  ECSServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:RegisterTargets'
                  - 'ec2:Describe*'
                  - 'ec2:AuthorizeSecurityGroupIngress'
                Resource: '*'
Outputs:
  EcsSecurityGroup:
    Description: EcsSecurityGroup
    Value: !Ref EcsSecurityGroup
    Export:
      Name: !Sub '${Env}-EcsSecurityGroup'
  CloudwatchLogsGroup:
    Description: CloudwatchLogsGroup
    Value: !Ref CloudwatchLogsGroup
    Export:
      Name: !Sub '${Env}-CloudwatchLogsGroup'
  ECSServiceRole:
    Description: ECSServiceRole
    Value: !Ref ECSServiceRole
    Export:
      Name: !Sub '${Env}-ECSServiceRole'
