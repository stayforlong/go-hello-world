- name: Create ECR repository
  ecs_ecr: 
    name: stayforlong-challenge
    region: "{{ aws_region }}"
  register: ecr_repo

- name: Build and Push docker image
  shell: "{{ item }}"
  with_items:
    - bash -lc "cd ../ && make all"
    - $(aws ecr get-login-password --region {{ aws_region }} | docker login --username AWS --password-stdin {{ ecr_repo.repository.repositoryUri }})
    - docker tag stayforlong:hello_world {{ ecr_repo.repository.repositoryUri }}:latest
    - docker push {{ ecr_repo.repository.repositoryUri }}:latest

- name: Create a new EC2 key
  ec2_key:
    name: "{{ env }}"
    region: "{{ aws_region }}"
  register: key_pair  

- name: Save private key
  copy: content="{{ key_pair.key.private_key }}" dest="{{ env }}.pem" mode=0600
  when: key_pair.changed

- name: Deploy VPC CloudFormation infrastructure
  cloudformation:
    stack_name: "VPC-{{ env }}"
    state: present
    region: "{{ aws_region }}"
    template: "roles/cloudformation/files/vpc.yml"
    template_parameters:
      Env: "{{ env }}"
    tags:
      Stack: "VPC-{{ env }}"

- name: Deploy ECS Cluster CloudFormation infrastructure
  cloudformation:
    stack_name: "ECS-{{ env }}"
    state: present
    region: "{{ aws_region }}"
    template: "roles/cloudformation/files/ecs-cluster.yml"
    template_parameters:
      Env: "{{ env }}"
      myIP: "{{ IP }}"
      InstanceTypes: "{{ instance_types }}"
    tags:
      Stack: "ECS-{{ env }}"

- name: Deploy ECS Service CloudFormation infrastructure
  cloudformation:
    stack_name: "ECS-{{ service_name }}-{{ env }}"
    state: present
    region: "{{ aws_region }}"
    template: "roles/cloudformation/files/ecs-service.yml"
    template_parameters:
      Env: "{{ env }}"
      DockerImage: "{{ ecr_repo.repository.repositoryUri }}:latest"
      ServiceName: "{{ service_name }}"
    tags:
      Stack: "ECS-{{ service_name }}-{{ env }}"